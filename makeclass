#!/usr/bin/perl

# Script for generating C++ classes
# Original by Frank Brokken <f.b.brokken@rc.rug.nl>
# Extended by Romke van der Meulen <R.van.der.Meulen@ai.rug.nl>

# Change this to the value you want in the @author docblock tag
$author = "Your Name <email\@host.com>";

sub getYes
{
    print("@_ [y/n]? ");
    <STDIN> =~ /^\s*y\s*$/;
}

sub existing
{
    -e $_[0] && !getYes("$_[0] exists. Overwrite");
}

sub makeDefaultConstructor
{
    $defaultconstructor = 1;

    local $file = "${dirname}1.cc";

    return if existing $file;

    open(FILE, ">$file") || die "Can't write $file: $!";

    print FILE <<C1;
#include "$dirname.ih"

${classname}::$classname()
//:
{
}
C1
    close(FILE);
}

sub makeCopyConstructor
{
    $copyconstructor = 1;

    local $file = "${dirname}2.cc";

    return if existing $file;

    open(FILE, ">$file") || die "Can't write $file: $!";

    $copyCall = $copy ? "copy(other);" : "";

    print FILE <<CPCONS;
#include "$dirname.ih"

${classname}::$classname($classname const &other)
//:
{
    $copyCall
}
CPCONS
    close(FILE);
}

sub makeMoveConstructor
{
    $moveconstructor = 1;

    local $file = "${dirname}3.cc";

    return if existing $file;

    open(FILE, ">$file") || die "Can't write $file: $!";

    print FILE <<MVCONS;
#include "$dirname.ih"

${classname}::$classname($classname &&anonymous)
//:
{
}
MVCONS
    close(FILE);
}

sub makeDestructor
{
    $destructor = 1;

    local $file = "destructor.cc";

    return if existing $file;

    open(FILE, ">$file") || die "Can't write $file: $!";

    $destroyCall = $destroy ? "destroy();" : "";
    print FILE <<D;
#include "$dirname.ih"

${classname}::~$classname()
{
    $destroyCall
}
D
    close(FILE);
}

sub makeAssignmentOperator
{
    $assignmentoperator = 1;

    local $file = "operatorassign.cc";

    return if existing $file;

    open(FILE, ">$file") || die "Can't write $file: $!";

    print FILE <<OP1;
#include "$dirname.ih"

$classname \&${classname}::operator=($classname const &other)
{
    if (this != &other)
    {
OP1
    print FILE <<OP2 if $copy;
        $destroyCall
        $copyCall
OP2
    print FILE <<OP3;
    }
    return *this;
}
OP3
    close(FILE);
}

sub makeCopy
{
    $copy = 1;

    local $file = "copy.cc";

    return if existing $file;

    open(FILE, ">$file") || die "Can't write $file: $!";

    print FILE <<COPY;
#include "$dirname.ih"

void ${classname}::copy($classname const &other)
{
}
COPY
    close(FILE);
}


sub makeDestroy
{
    $destroy = 1;

    local $file = "destroy.cc";

    return if existing $file;

    open(FILE, ">$file") || die "Can't write $file: $!";

    print FILE <<DESTROY;
#include "$dirname.ih"

void ${classname}::destroy()
{
}
DESTROY
    close(FILE);
}

sub makeInternalHeader
{
    local $file = "$dirname.ih";

    return if existing $file;

    local $ns = $namespace ? "using namespace $namespace;" : "";

    open(FILE, ">$file") || die "Can't write $file: $!";

    print FILE <<IH;
#include "$dirname.h"

using namespace std;
$ns
IH
    close(FILE);
}

sub makeMemberFrame
{
    return if existing "frame";

    open(FILE, ">frame") || die "Can't write `frame': $!";
    print FILE <<FRAME;
#include "$dirname.ih"

/**
 * Description
 */
${classname}::
{
	
}
FRAME
    close(FILE);
}


sub makeHeader
{
    local $file = "$dirname.h";

    return if existing $file;

    local $ns = $namespace ? "using namespace $namespace;\n" : "";

    open(FILE, ">$file") || die "Can't write $file: $!";

    local $nsbegin;
    local $nsend;

    local $caps = uc $classname;
    local $ns_caps = "";

    if ($namespace)
    {
        $nsbegin = "namespace $namespace\n{\n";
        $nsend = "}";
        $ns_caps = uc $namespace . "_";
    }

    print FILE <<H1;
#ifndef INCLUDED_${ns_caps}${caps}_H
#define INCLUDED_${ns_caps}${caps}_H

$nsbegin
/**
 * Description
 * 
 * \@author $author
 */
class $classname
{
    public:
H1

    print FILE <<H2 if $defaultconstructor;
        $classname();
H2

    print FILE <<H3 if $copyconstructor;
        $classname($classname const &other);
H3

    print FILE <<H3a if $moveconstructor;
        $classname($classname &&anonymous);
H3a

    print FILE <<H4 if $destructor;
        ~$classname();
H4
    
    print FILE <<H5 if $assignmentoperator;

        $classname \&operator=($classname const &other);
H5

    print FILE <<HP;

    private:
HP

    print FILE <<H6 if $copy;
        void copy($classname const &other);
H6
    print FILE <<H7 if $destroy;
        void destroy();
H7
    print FILE <<H8;
};

$nsend        
#endif
H8

    close(FILE);
}

@ARGV || die "makeclass V 1.05.\n" .
        "Usage: makeclass class [namespace]\n" .
        "Where: makeclass class.\n" .
        "   class: the name of the class to create in a subdir.\n" .
        "          Capitals (and underscores) in \`class' are\n" .
        "          transformed to lower case when creating the directory\n" .
        "          Capitals in the class name itself are kept.\n" .
        "   [namespace]: optional namespace to define the class in.\n" .
        "\n";

$classname = $ARGV[0];
$namespace = $ARGV[1];

$dirname = lc $classname;
$dirname =~ s/_//g;

print "constructing class $classname in directory $dirname\n";


if (-e $dirname && !getYes("$dirname exists. Continue"))
{
    exit(1);
}

mkdir($dirname);

chdir($dirname) || die "Can't chdir to $dirname: $!";

makeDefaultConstructor()    if getYes("make $classname()");

makeMoveConstructor()       if getYes("make $classname($classname &&)");

makeCopy()                  if getYes("make void copy($classname const &)");

if ($copy)
{
    makeDestroy();
    makeCopyConstructor();
    makeDestructor();
    makeAssignmentOperator();
}
else
{
    makeCopyConstructor()   if getYes("make $classname($classname const &)");
    makeDestructor()        if getYes("make ~$classname()");
    makeAssignmentOperator()   if getYes("make operator=()");
}    

makeHeader();
makeInternalHeader();
makeMemberFrame();

exit(0);
